name: Zoe
patterns:
    - include: '#keywords'
    - include: '#constants'
    - include: '#comments'
    - include: '#llvm'
    - include: '#strings'
    - include: '#type'
    - include: '#function'
    - include: '#atnames'
repository:
    keywords:
        patterns:
            -
                name: keyword.control.zoe
                match: \b(namespace|take|iso(late)?|as|(?:err)?defer|errdefer|method|inline|where|from|import|export|local|is|not|trait|has|wants|switch|try|catch|\$?if|in|elif|else|or|not|\$?for|\$?while|break|continue|yield|return|fn|unsafe|struct|distinct|type(of)?|enum|union|let|const|var|extern)\b|\$(switch|while|for|if|else)
    constants:
        name: constant.zoe
        match: \b(null|void|none|never|nothing|any|this|true|false|stub|builtin|stub|error|(0[xb])?(\d[\d_]*\.)?[\d_]+)\b

    llvm:
        begin: '(\bllvm\b)\s*(\{)'
        end: '\}'
        beginCaptures:
            "0": {name: keyword.control.zoe}
        name: source.llvm
        patterns:
            - include: source.c

    comments:
        patterns:
            -
                begin: '/\*\?'
                end: '\*/'
                name: comment.block.documentation.zoe
                patterns:
                    - include: source.md
            -
                begin: '/\*'
                end: '\*/'
                name: comment.block.zoe
                patterns:
                    - include: '#comments'
            -
                match: '//(\![\w_-]+)?[^\n]*'
                name: comment.line.double-slash.zoe
                captures:
                    1: { name: string.pragma.zoe }

    function:
        match: (\w+)(?:\[([^\]]*)\])?(::\w+)?(?=\()
        name: entity.name.function.zoe
        captures:
            2: { name: entity.name.type.zoe }
            3: { name: entity.name.tag.zoe }

    atnames:
        name: entity.name.tag.zoe
        match: @\*?|#

    type:
        name: entity.name.type.zoe
        match: \bany\b|(\b[a-zA-Z]\w*\.)*\$?\b[A-Z]\w*(\[\])*\??

    strings:
      patterns:
        -
          name: string.char.zoe
          match: \\\\?.

        -
          name: string.quoted.literal.zoe
          begin: '`'
          end: '`'

        -
          name: string.quoted.double.zoe
          begin: '"'
          end: '"'
          patterns:
            -
                name: constant.character.escape.zoe
                match: \\.
            -
                begin: '\{'
                end: '\}'
                patterns:
                - include: source.zoe
        -
          name: string.quoted.single.zoe
          begin: "'"
          end: "'"
          patterns:
              -
                  name: constant.character.escape.zoe
                  match: \\.
scopeName: source.zoe
